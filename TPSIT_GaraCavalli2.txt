package garadicavalli;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Cavallo extends Thread {
    private final String nome;
    private final int lunghezzaPercorso;
    private final int velocità; // in metri al secondo
    private int distanzaPercorsa = 0;
    private static final Random random = new Random();
    private boolean infortunato = false;

    public Cavallo(String nome, int lunghezzaPercorso, int velocità) {
        this.nome = nome;
        this.lunghezzaPercorso = lunghezzaPercorso;
        this.velocità = velocità;
    }

    @Override
    public void run() {
        while (distanzaPercorsa < lunghezzaPercorso) {
            // Simula la possibilità di infortunio
            if (random.nextInt(100) < 10) { // 10% di probabilità di infortunio
                infortunato = true;
                System.out.println(nome + " si è infortunato ed esce dalla gara!");
                return;
            }
            distanzaPercorsa += velocità; // Avanza in base alla velocità
            System.out.println(nome + " ha percorso " + distanzaPercorsa + " metri su " + lunghezzaPercorso);
            try {
                Thread.sleep(1000); // Pausa di un secondo per simulare il tempo di avanzamento
            } catch (InterruptedException e) {
                System.out.println(nome + " è stato interrotto!");
            }
        }
        System.out.println(nome + " ha terminato la gara!");
    }

    public String getNome() {
        return nome;
    }

    public boolean isInfortunato() {
        return infortunato;
    }

    public int getDistanzaPercorsa() {
        return distanzaPercorsa;
    }
}

public class GaraDiCavalli {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Inserisci la lunghezza del percorso (in metri): ");
        int lunghezzaPercorso = scanner.nextInt();

        System.out.print("Inserisci il numero di cavalli: ");
        int numeroCavalli = scanner.nextInt();
        scanner.nextLine(); // Consuma il newline

        List<Cavallo> cavalli = new ArrayList<>();

        for (int i = 0; i < numeroCavalli; i++) {
            System.out.print("Inserisci il nome del cavallo " + (i + 1) + ": ");
            String nome = scanner.nextLine();
            System.out.print("Inserisci la velocità del cavallo " + nome + " (in metri al secondo): ");
            int velocità = scanner.nextInt();
            scanner.nextLine(); // Consuma il newline
            Cavallo cavallo = new Cavallo(nome, lunghezzaPercorso, velocità);
            cavalli.add(cavallo);
        }

        System.out.println("I cavalli stanno per partire!");

        for (Cavallo cavallo : cavalli) {
            cavallo.start();
        }

        List<Cavallo> finisher = new ArrayList<>();

        for (Cavallo cavallo : cavalli) {
            try {
                cavallo.join();
                if (!cavallo.isInfortunato()) {
                    finisher.add(cavallo);
                }
            } catch (InterruptedException e) {
                System.out.println("La gara è stata interrotta!");
            }
        }

        System.out.println("La gara è terminata!");
        // Crea la classifica dei primi 3
        finisher.sort((c1, c2) -> Integer.compare(c2.getDistanzaPercorsa(), c1.getDistanzaPercorsa()));

        try {
            System.out.print("Inserisci il nome del file per salvare i risultati: ");
            String fileName = scanner.nextLine();
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true));

            writer.write("Classifica:\n");
            for (int i = 0; i < Math.min(finisher.size(), 3); i++) {
                Cavallo cavallo = finisher.get(i);
                writer.write((i + 1) + ". " + cavallo.getNome() + " - " + cavallo.getDistanzaPercorsa() + " metri\n");
                System.out.println((i + 1) + ". " + cavallo.getNome() + " - " + cavallo.getDistanzaPercorsa() + " metri");
            }

            writer.close();
            System.out.println("Risultati salvati nel file " + fileName);
        } catch (IOException e) {
            System.out.println("Errore durante il salvataggio dei risultati: " + e.getMessage());
        }

        scanner.close();
    }
}
